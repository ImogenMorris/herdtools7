include "aarch64fences.cat"
include "choices.cat"
let Imp = NExp

let C_IC = IC & domain(po; [dsb.full])

let add_pair p =
  map (fun r -> (p | r))

let rec add_both_choices (rs,wts) = match wts with
|| {} -> rs
|| wt ++ wts ->
   let wt = wt ++ 0 in (* Change pair into relation *)
   let tw = wt^-1 in (* Notice, ^-1 could operate on pairs directly *)
   let r1 = add_pair wt rs
   and r2 = add_pair tw rs in
   let rs = r1|r2 in
   add_both_choices (rs,wts)
end

(* takes a relation "unordered-pairs" of the form [X]; r; [Y]
         where "X" and "Y" are disjoint and "r" is meant to be symmetric
   and a relation "rel",
   and returns a set of acyclic relations consistent with "rel" and ordering
   the unordered pairs one way or the other.
 *)
let enumerate-ordered-pairs (unordered-pairs,rel) =
    let no-choice = rel & (unordered-pairs | unordered-pairs^-1) in
    let need-choosing = unordered-pairs \ (no-choice | no-choice^-1) in
    add_both_choices ({no-choice},need-choosing)

let make-w2dc-order rel =
    enumerate-ordered-pairs (
        scl & (DC.CVAU * (Exp & W)),
        rel | (IW * (_\IW))
    )

let make-ic2if-order rel =
    enumerate-ordered-pairs (
        scl & (C_IC * (Imp & INSTR & R)),
        rel
    )